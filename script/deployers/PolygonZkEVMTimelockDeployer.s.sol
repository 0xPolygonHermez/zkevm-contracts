// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

////////////////////////////////////////////////////
// AUTOGENERATED - DO NOT EDIT THIS FILE DIRECTLY //
////////////////////////////////////////////////////

import "forge-std/Script.sol";

import "contracts/PolygonZkEVMTimelock.sol";
import {ProxyAdmin} from "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol";
import {TransparentUpgradeableProxy, ITransparentUpgradeableProxy} from "@openzeppelin/contracts5/proxy/transparent/TransparentUpgradeableProxy.sol";

abstract contract PolygonZkEVMTimelockDeployer is Script {
    PolygonZkEVMTimelock internal polygonZkEVMTimelock;
    ProxyAdmin internal polygonZkEVMTimelockProxyAdmin;
    address internal polygonZkEVMTimelockImplementation;

    function deployPolygonZkEVMTimelockTransparent(
        address proxyAdminOwner,
        uint256 minDelay,
        address[] memory proposers,
        address[] memory executors,
        address admin,
        PolygonZkEVM _polygonZkEVM
    )
        internal
        returns (address implementation, address proxyAdmin, address proxy)
    {
        bytes memory initData = "";

        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));

        polygonZkEVMTimelockImplementation = address(
            new PolygonZkEVMTimelock(
                minDelay,
                proposers,
                executors,
                admin,
                _polygonZkEVM
            )
        );
        polygonZkEVMTimelock = PolygonZkEVMTimelock(
            payable(
                address(
                    new TransparentUpgradeableProxy(
                        polygonZkEVMTimelockImplementation,
                        proxyAdminOwner,
                        initData
                    )
                )
            )
        );

        vm.stopBroadcast();

        polygonZkEVMTimelockProxyAdmin = ProxyAdmin(
            address(
                uint160(
                    uint256(
                        vm.load(
                            address(polygonZkEVMTimelock),
                            hex"b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"
                        )
                    )
                )
            )
        );

        return (
            polygonZkEVMTimelockImplementation,
            address(polygonZkEVMTimelockProxyAdmin),
            address(polygonZkEVMTimelock)
        );
    }

    function deployPolygonZkEVMTimelockImplementation(
        uint256 minDelay,
        address[] memory proposers,
        address[] memory executors,
        address admin,
        PolygonZkEVM _polygonZkEVM
    ) internal returns (address implementation) {
        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));
        implementation = address(
            new PolygonZkEVMTimelock(
                minDelay,
                proposers,
                executors,
                admin,
                _polygonZkEVM
            )
        );
        vm.stopBroadcast();
    }
}
