// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

////////////////////////////////////////////////////
// AUTOGENERATED - DO NOT EDIT THIS FILE DIRECTLY //
////////////////////////////////////////////////////

import "forge-std/Script.sol";

import "contracts/PolygonZkEVMBridgeV2.sol";
import {ProxyAdmin} from "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol";
import {TransparentUpgradeableProxy, ITransparentUpgradeableProxy} from "@openzeppelin/contracts5/proxy/transparent/TransparentUpgradeableProxy.sol";

abstract contract PolygonZkEVMBridgeV2Deployer is Script {
    PolygonZkEVMBridgeV2 internal polygonZkEVMBridgeV2;
    ProxyAdmin internal polygonZkEVMBridgeV2ProxyAdmin;
    address internal polygonZkEVMBridgeV2Implementation;

    function deployPolygonZkEVMBridgeV2Transparent(
        address proxyAdminOwner,
        uint32 _networkID,
        address _gasTokenAddress,
        uint32 _gasTokenNetwork,
        IBasePolygonZkEVMGlobalExitRoot _globalExitRootManager,
        address _polygonRollupManager,
        bytes memory _gasTokenMetadata
    )
        internal
        returns (address implementation, address proxyAdmin, address proxy)
    {
        bytes memory initData = abi.encodeCall(
            PolygonZkEVMBridgeV2.initialize,
            (
                _networkID,
                _gasTokenAddress,
                _gasTokenNetwork,
                _globalExitRootManager,
                _polygonRollupManager,
                _gasTokenMetadata
            )
        );

        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));

        polygonZkEVMBridgeV2Implementation = address(
            new PolygonZkEVMBridgeV2()
        );
        polygonZkEVMBridgeV2 = PolygonZkEVMBridgeV2(
            address(
                new TransparentUpgradeableProxy(
                    polygonZkEVMBridgeV2Implementation,
                    proxyAdminOwner,
                    initData
                )
            )
        );

        vm.stopBroadcast();

        polygonZkEVMBridgeV2ProxyAdmin = ProxyAdmin(
            address(
                uint160(
                    uint256(
                        vm.load(
                            address(polygonZkEVMBridgeV2),
                            hex"b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"
                        )
                    )
                )
            )
        );

        return (
            polygonZkEVMBridgeV2Implementation,
            address(polygonZkEVMBridgeV2ProxyAdmin),
            address(polygonZkEVMBridgeV2)
        );
    }

    function deployPolygonZkEVMBridgeV2Implementation()
        internal
        returns (address implementation)
    {
        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));
        implementation = address(new PolygonZkEVMBridgeV2());
        vm.stopBroadcast();
    }
}
