// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

////////////////////////////////////////////////////
// AUTOGENERATED - DO NOT EDIT THIS FILE DIRECTLY //
////////////////////////////////////////////////////

import "forge-std/Script.sol";

import "contracts/consensus/validium/PolygonDataCommittee.sol";
import {ProxyAdmin} from "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol";
import {TransparentUpgradeableProxy, ITransparentUpgradeableProxy} from "@openzeppelin/contracts5/proxy/transparent/TransparentUpgradeableProxy.sol";

abstract contract PolygonDataCommitteeDeployer is Script {
    PolygonDataCommittee internal polygonDataCommittee;
    ProxyAdmin internal polygonDataCommitteeProxyAdmin;
    address internal polygonDataCommitteeImplementation;

    function deployPolygonDataCommitteeTransparent(
        address proxyAdminOwner
    )
        internal
        returns (address implementation, address proxyAdmin, address proxy)
    {
        bytes memory initData = abi.encodeCall(
            PolygonDataCommittee.initialize,
            ()
        );

        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));

        polygonDataCommitteeImplementation = address(
            new PolygonDataCommittee()
        );
        polygonDataCommittee = PolygonDataCommittee(
            address(
                new TransparentUpgradeableProxy(
                    polygonDataCommitteeImplementation,
                    proxyAdminOwner,
                    initData
                )
            )
        );

        vm.stopBroadcast();

        polygonDataCommitteeProxyAdmin = ProxyAdmin(
            address(
                uint160(
                    uint256(
                        vm.load(
                            address(polygonDataCommittee),
                            hex"b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"
                        )
                    )
                )
            )
        );

        return (
            polygonDataCommitteeImplementation,
            address(polygonDataCommitteeProxyAdmin),
            address(polygonDataCommittee)
        );
    }

    function deployPolygonDataCommitteeImplementation()
        internal
        returns (address implementation)
    {
        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));
        implementation = address(new PolygonDataCommittee());
        vm.stopBroadcast();
    }
}
